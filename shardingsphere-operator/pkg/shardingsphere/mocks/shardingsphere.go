/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: shardingsphere.go

// Package mock_shardingsphere is a generated GoMock package.
package mock_shardingsphere

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIServer is a mock of IServer interface.
type MockIServer struct {
	ctrl     *gomock.Controller
	recorder *MockIServerMockRecorder
}

// MockIServerMockRecorder is the mock recorder for MockIServer.
type MockIServerMockRecorder struct {
	mock *MockIServer
}

// NewMockIServer creates a new mock instance.
func NewMockIServer(ctrl *gomock.Controller) *MockIServer {
	mock := &MockIServer{ctrl: ctrl}
	mock.recorder = &MockIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServer) EXPECT() *MockIServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIServer)(nil).Close))
}

// CreateDatabase mocks base method.
func (m *MockIServer) CreateDatabase(dbName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", dbName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockIServerMockRecorder) CreateDatabase(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockIServer)(nil).CreateDatabase), dbName)
}

// RegisterStorageUnit mocks base method.
func (m *MockIServer) RegisterStorageUnit(dsName, host string, port uint, dbName, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStorageUnit", dsName, host, port, dbName, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStorageUnit indicates an expected call of RegisterStorageUnit.
func (mr *MockIServerMockRecorder) RegisterStorageUnit(dsName, host, port, dbName, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorageUnit", reflect.TypeOf((*MockIServer)(nil).RegisterStorageUnit), dsName, host, port, dbName, user, password)
}

// UnRegisterStorageUnit mocks base method.
func (m *MockIServer) UnRegisterStorageUnit(dsName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegisterStorageUnit", dsName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegisterStorageUnit indicates an expected call of UnRegisterStorageUnit.
func (mr *MockIServerMockRecorder) UnRegisterStorageUnit(dsName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterStorageUnit", reflect.TypeOf((*MockIServer)(nil).UnRegisterStorageUnit), dsName)
}
